// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amy/gophercon/version (interfaces: VersionServiceClient)

// Package mock_version is a generated GoMock package.

// mockgen github.com/amy/gophercon/version VersionServiceClient > mockVersion.go
package mock_version

import (
	context "context"
	reflect "reflect"

	version "github.com/amy/gophercon/version"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVersionServiceClient is a mock of VersionServiceClient interface
type MockVersionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceClientMockRecorder
}

// MockVersionServiceClientMockRecorder is the mock recorder for MockVersionServiceClient
type MockVersionServiceClientMockRecorder struct {
	mock *MockVersionServiceClient
}

// NewMockVersionServiceClient creates a new mock instance
func NewMockVersionServiceClient(ctrl *gomock.Controller) *MockVersionServiceClient {
	mock := &MockVersionServiceClient{ctrl: ctrl}
	mock.recorder = &MockVersionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVersionServiceClient) EXPECT() *MockVersionServiceClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockVersionServiceClient) GetVersion(arg0 context.Context, arg1 *version.GetVersionRequest, arg2 ...grpc.CallOption) (*version.GetVersionResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*version.GetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockVersionServiceClientMockRecorder) GetVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionServiceClient)(nil).GetVersion), varargs...)
}
